-get intial repo setup
-use CRA to create basic typescript react app
-create POC for uploading images and storing them in indexedDB
-create POC for affine transformation based image alignment 
-develop general outline of app 
-improve performance of mark component
-add auto-resize option when loading images 
-add initializer for default settings 
-add ratio lock option for adjust component image scaling
-improve layout/styling 
-add better/more load indicators
-add validations to viewer processing 
-load any already processed images on viewer component load
-improve options for processing/re-processing images in viewer component
-improve caching of images 
-store image natural dimensions in DB so they dont have to be re-calculated on the fly by loading image
-add check for viewer that adjustment image (image selected for adjustment) exists
-improve overall data/state validation and warning display
	-potentially modularize and make global
-add option on viewer component to process just entries with no aligned image (partial processing)
-consider making cropping resize instead of reset to corners when image scaling is changed (on adjust component)
-refine paging functionality on entry component 
-add streamlined "add entry" wizard to entry component
-add clear marks option to mark image component
-improve dialogs/modals
-make the "add" functionality in entry component ensure that an image, marks, weight, and date are set before allowing it to be saved
	--make it so that warnings are shown if trying to save before adding all required data
-improve touch behavior of mark image
	-try to prevent scrolling when marking image 
	-consider offsetting the magnification bubble on mobile 
	-add scroll area next to image on mobile to make it easier to get back to Mark buttons
-fix datetime recording (currently not local time) 
-fix video export option for hold last frame so that the value specified is actually used 
-develop touch compatible functionality for adjust crop component 
-improve styles (layout and code)
	--implement bulma? used bulma
-create "disable/hide" entry option (so entry doesnt get exported or included in graphs)
	--luckily already had key in DB so no DB version updated needed 
-add loading indicator for entries page
	-further test component loading times with 300+ entries (seems too slow to load)
		-if slow loading cannot be fixed, add spinner indicator prior to page loading
			--possible to investigate improving load times in future, but added loading indicator to entries page anyhow
-implement functionality to import/export raw db data 
-convert settings edit forms to non-controlled fields 



+test performance on various devices
	+explore options for improving image performance

+add functionality to abort 'export video locally' frame rendering loop
	--for example when the page changes or with a cancel button

+fix typescript error for HTMLDialogElement
	--doesnt think show, showModal, or close methods exist

+modularize common db calls 

+make it so that boolean 'false' can be entered on the settings component
	--currently entering 'false' puts in literal 'false' string which is truthy

+refine/refactor export component (very messy currently)

+make duplicate feature of entry component also duplicate the alignedImage data 

+in entry component, improve handling of auto update of date
	--when re-ordered, decided how to handle (auto seek to new page?)
	--disable auto update and add save button? 

+ensure pagination on entry component can handle all cases with < 5 pages 

+update adjust component so that it warns if current chosenEntryIdForAdjustments value is invalid (not an existing entry id)

+fix jank when loading EntriesValidator component before validations finish and/or during transition from loading to finished

+ensure label elements are attached to the fields they label (aria)

+devise method to make hover image more magnified / controllable magnification 

+add plain magnifier option to the mark image controls 
	--would allow user to zoom in on existing marks without possiblity of changing any marks 

+improve touch screen performance of mark image controls 
	--perhaps have a "two finger" approach where one finger controls where mark goes and the other clicks a button to set it 

+refine export/import progress reporting 
	+improve progress messages/indication for import menu
	+improve progress messages/indication for export menu

+create live graph viewer with trends and stats
	--show projected weightloss with trend line?
	--show bmi/weight classification scale? 
	--possibly have options to show weekly/monthly mean/median/etc

+show lowest weight achieved so far 

+hamburger menu for entries list (maybe)
	--alteratively, refine the entries listings. more compact and adding a few options 

+determine if any new vaidations are needed related to includeInExport field now being used
	--'all entries have aligned image' needs to be updated to account for entries with includeInExport = false

+add censoring feature to the Adjust screen 

+configure CRA/webpack to automatically scrub out console.* calls on production build

+add unit labels as-needed based on measurementSystem setting
	--2023-01-22: started adding where applicable 

+refine entry image URL generation so URLs arent created/revoked unnecessarily

----------------------------------------------------------------

long-term: 

suggestions from a redditor:
	+add unit toggle between imperial and metric
		--2023-01-22: added functionality (setting), still need to add easily accessible user control
	-add height data field 
		--added jan 2023
	+add some circumferences data fields
		--2023-01-22: not exactly consistent what circumferences are measued or how bf% is derived, not sure if adding is useful  
	+add functionality to calculate bmi

+extract modal component and add 508 functionality such as focus trapping, virtual cursor traping, multiple exit methods, setting focus on open, and focus saving/reset on close

+investigate methods to reduce load time on entries page

+onion skin image capture mode
	--possible to use canvas to display camera input and then can customize the overlay? 

+make entries data push down from top level app/component and not refetch in all screens 
	--have to review feasibility of doing this and any side effects resulting 
